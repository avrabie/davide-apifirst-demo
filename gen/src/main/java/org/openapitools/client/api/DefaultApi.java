/*
 * Davide Demo
 * Book Davide demo example
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: davide.listello@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Book;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createbook
     * @param book A new &#x60;book&#x60; to be created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createbookCall(Book book, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = book;

        // create path and map variables
        String localVarPath = "/books";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createbookValidateBeforeCall(Book book, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'book' is set
        if (book == null) {
            throw new ApiException("Missing the required parameter 'book' when calling createbook(Async)");
        }
        

        okhttp3.Call localVarCall = createbookCall(book, _callback);
        return localVarCall;

    }

    /**
     * Create a book
     * Creates a new instance of a &#x60;book&#x60;.
     * @param book A new &#x60;book&#x60; to be created. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public void createbook(Book book) throws ApiException {
        createbookWithHttpInfo(book);
    }

    /**
     * Create a book
     * Creates a new instance of a &#x60;book&#x60;.
     * @param book A new &#x60;book&#x60; to be created. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createbookWithHttpInfo(Book book) throws ApiException {
        okhttp3.Call localVarCall = createbookValidateBeforeCall(book, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a book (asynchronously)
     * Creates a new instance of a &#x60;book&#x60;.
     * @param book A new &#x60;book&#x60; to be created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createbookAsync(Book book, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createbookValidateBeforeCall(book, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletebook
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletebookCall(String bookId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{bookId}"
            .replaceAll("\\{" + "bookId" + "\\}", localVarApiClient.escapeString(bookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletebookValidateBeforeCall(String bookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bookId' is set
        if (bookId == null) {
            throw new ApiException("Missing the required parameter 'bookId' when calling deletebook(Async)");
        }
        

        okhttp3.Call localVarCall = deletebookCall(bookId, _callback);
        return localVarCall;

    }

    /**
     * Delete a book
     * Deletes an existing &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public void deletebook(String bookId) throws ApiException {
        deletebookWithHttpInfo(bookId);
    }

    /**
     * Delete a book
     * Deletes an existing &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletebookWithHttpInfo(String bookId) throws ApiException {
        okhttp3.Call localVarCall = deletebookValidateBeforeCall(bookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a book (asynchronously)
     * Deletes an existing &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletebookAsync(String bookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletebookValidateBeforeCall(bookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getbook
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;book&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book with the id specified not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbookCall(String bookId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{bookId}"
            .replaceAll("\\{" + "bookId" + "\\}", localVarApiClient.escapeString(bookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getbookValidateBeforeCall(String bookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bookId' is set
        if (bookId == null) {
            throw new ApiException("Missing the required parameter 'bookId' when calling getbook(Async)");
        }
        

        okhttp3.Call localVarCall = getbookCall(bookId, _callback);
        return localVarCall;

    }

    /**
     * Get a book
     * Gets the details of a single instance of a &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @return Book
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;book&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book with the id specified not found </td><td>  -  </td></tr>
     </table>
     */
    public Book getbook(String bookId) throws ApiException {
        ApiResponse<Book> localVarResp = getbookWithHttpInfo(bookId);
        return localVarResp.getData();
    }

    /**
     * Get a book
     * Gets the details of a single instance of a &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @return ApiResponse&lt;Book&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;book&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book with the id specified not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Book> getbookWithHttpInfo(String bookId) throws ApiException {
        okhttp3.Call localVarCall = getbookValidateBeforeCall(bookId, null);
        Type localVarReturnType = new TypeToken<Book>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a book (asynchronously)
     * Gets the details of a single instance of a &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;book&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book with the id specified not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbookAsync(String bookId, final ApiCallback<Book> _callback) throws ApiException {

        okhttp3.Call localVarCall = getbookValidateBeforeCall(bookId, _callback);
        Type localVarReturnType = new TypeToken<Book>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getbooks
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns an array of &#x60;book&#x60; entities. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbooksCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getbooksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getbooksCall(_callback);
        return localVarCall;

    }

    /**
     * List All books
     * Gets a list of all &#x60;book&#x60; entities.
     * @return List&lt;Book&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns an array of &#x60;book&#x60; entities. </td><td>  -  </td></tr>
     </table>
     */
    public List<Book> getbooks() throws ApiException {
        ApiResponse<List<Book>> localVarResp = getbooksWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List All books
     * Gets a list of all &#x60;book&#x60; entities.
     * @return ApiResponse&lt;List&lt;Book&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns an array of &#x60;book&#x60; entities. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Book>> getbooksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getbooksValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Book>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All books (asynchronously)
     * Gets a list of all &#x60;book&#x60; entities.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns an array of &#x60;book&#x60; entities. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbooksAsync(final ApiCallback<List<Book>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getbooksValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Book>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatebook
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param book Updated &#x60;book&#x60; information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatebookCall(String bookId, Book book, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = book;

        // create path and map variables
        String localVarPath = "/books/{bookId}"
            .replaceAll("\\{" + "bookId" + "\\}", localVarApiClient.escapeString(bookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatebookValidateBeforeCall(String bookId, Book book, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bookId' is set
        if (bookId == null) {
            throw new ApiException("Missing the required parameter 'bookId' when calling updatebook(Async)");
        }
        
        // verify the required parameter 'book' is set
        if (book == null) {
            throw new ApiException("Missing the required parameter 'book' when calling updatebook(Async)");
        }
        

        okhttp3.Call localVarCall = updatebookCall(bookId, book, _callback);
        return localVarCall;

    }

    /**
     * Update a book
     * Updates an existing &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param book Updated &#x60;book&#x60; information. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public void updatebook(String bookId, Book book) throws ApiException {
        updatebookWithHttpInfo(bookId, book);
    }

    /**
     * Update a book
     * Updates an existing &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param book Updated &#x60;book&#x60; information. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatebookWithHttpInfo(String bookId, Book book) throws ApiException {
        okhttp3.Call localVarCall = updatebookValidateBeforeCall(bookId, book, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a book (asynchronously)
     * Updates an existing &#x60;book&#x60;.
     * @param bookId A unique identifier for a &#x60;book&#x60;. (required)
     * @param book Updated &#x60;book&#x60; information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatebookAsync(String bookId, Book book, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatebookValidateBeforeCall(bookId, book, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
